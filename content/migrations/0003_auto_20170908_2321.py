# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-08 23:21
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('content', '0002_auto_20170612_1237'),
    ]

    operations = [
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('visible', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Questionnaire',
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireInstance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_submitted', models.DateTimeField(blank=True, null=True)),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='content.Questionnaire')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'QuestionnaireInstance',
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Plain text'), (2, 'Multiple choice')], default=1)),
                ('text', models.CharField(max_length=8192)),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='content.Questionnaire')),
            ],
            options={
                'db_table': 'QuestionnaireQuestion',
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireQuestionOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=8192)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='content.QuestionnaireQuestion')),
            ],
            options={
                'db_table': 'QuestionnaireQuestionOption',
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireQuestionResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(blank=True, max_length=8192, null=True)),
                ('date_answered', models.DateTimeField(auto_now=True)),
                ('choice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='content.QuestionnaireQuestionOption')),
                ('instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_answers', to='content.QuestionnaireInstance')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='content.QuestionnaireQuestion')),
            ],
            options={
                'db_table': 'QuestionnaireQuestionResponse',
            },
        ),
        migrations.AlterUniqueTogether(
            name='questionnaireinstance',
            unique_together=set([('questionnaire', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='questionnaire',
            unique_together=set([('owner', 'name')]),
        ),
    ]
